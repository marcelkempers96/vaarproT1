import React, { useState, useEffect, useRef } from 'react'
import { MapContainer, TileLayer, Marker, Popup, Polyline, useMap, Circle, useMapEvents } from 'react-leaflet'
import 'leaflet/dist/leaflet.css'
import { Navigation, AlertTriangle, Fuel, Anchor, Lock, ChevronUp, ChevronDown, Mic, Volume2, VolumeX, Settings, Share, X, Clock, MapPin, Star, Phone, Globe } from 'lucide-react'
import L from 'leaflet'

// Layer Components for Real Netherlands Data
const WaterwaysLayer: React.FC<{ data: any }> = ({ data }) => {
  const map = useMap()
  
  useEffect(() => {
    if (data && data.elements) {
      const waterwaysLayer = L.geoJSON(null, { 
        style: () => ({ color: '#3b82f6', weight: 2, opacity: 0.9 }) 
      })
      
      const features = []
      for (const el of data.elements) {
        if (el.type === 'way' && el.geometry) {
          const coords = el.geometry.map((g: any) => [g.lat, g.lon])
          features.push({ 
            type: 'Feature', 
            geometry: { type: 'LineString', coordinates: coords }, 
            properties: el.tags || {} 
          })
        }
      }
      
      waterwaysLayer.addData({ type: 'FeatureCollection', features } as any)
      waterwaysLayer.addTo(map)
      
      return () => {
        map.removeLayer(waterwaysLayer)
      }
    }
  }, [data, map])
  
  return null
}

const LocksLayer: React.FC<{ data: any }> = ({ data }) => {
  const map = useMap()
  
  useEffect(() => {
    if (data && data.elements) {
      const locksLayer = L.layerGroup()
      
      for (const el of data.elements) {
        if ((el.type === 'node' && el.tags?.waterway === 'lock_gate') || 
            (el.type === 'way' && el.tags?.waterway === 'lock_gate') ||
            (el.type === 'node' && el.tags?.lock === 'yes') ||
            (el.type === 'way' && el.tags?.lock === 'yes')) {
          
          let lat, lon
          if (el.type === 'node') { lat = el.lat; lon = el.lon }
          else if (el.type === 'way' && el.center) { lat = el.center.lat; lon = el.center.lon }
          else continue
          
          const marker = L.marker([lat, lon], { 
            icon: L.divIcon({ 
              className: '', 
              html: '<div style="font-size:16px;line-height:16px;">🚦</div>', 
              iconSize: [16, 16], 
              iconAnchor: [8, 8] 
            }) 
          })
          
          const details = Object.entries(el.tags || {}).map(([k, v]) => `<div><strong>${k}</strong>: ${v}</div>`).slice(0, 10).join('')
          marker.bindPopup(`<div><strong>Lock</strong>${details}</div>`)
          locksLayer.addLayer(marker)
        }
      }
      
      locksLayer.addTo(map)
      
      return () => {
        map.removeLayer(locksLayer)
      }
    }
  }, [data, map])
  
  return null
}

const BridgesLayer: React.FC<{ data: any }> = ({ data }) => {
  const map = useMap()
  
  useEffect(() => {
    if (data && data.elements) {
      const bridgesLayer = L.layerGroup()
      
      for (const el of data.elements) {
        if (el.type === 'way' && el.tags?.bridge) {
          let lat, lon
          if (el.center) { lat = el.center.lat; lon = el.center.lon }
          else continue
          
          // Create custom bridge icon based on the provided image
          const bridgeIcon = L.divIcon({
            className: 'custom-bridge-icon',
            html: `<div style="
              width: 24px; 
              height: 24px; 
              background: #22c55e; 
              border-radius: 50%; 
              display: flex; 
              align-items: center; 
              justify-content: center; 
              color: white; 
              font-size: 14px; 
              font-weight: bold;
              box-shadow: 0 2px 4px rgba(0,0,0,0.3);
            ">🌉</div>`,
            iconSize: [24, 24],
            iconAnchor: [12, 12]
          })
          
          const marker = L.marker([lat, lon], { icon: bridgeIcon })
          const details = Object.entries(el.tags || {}).map(([k, v]) => `<div><strong>${k}</strong>: ${v}</div>`).slice(0, 10).join('')
          marker.bindPopup(`<div><strong>Bridge</strong>${details}</div>`)
          bridgesLayer.addLayer(marker)
        }
      }
      
      bridgesLayer.addTo(map)
      
      return () => {
        map.removeLayer(bridgesLayer)
      }
    }
  }, [data, map])
  
  return null
}

const DocksLayer: React.FC<{ data: any }> = ({ data }) => {
  const map = useMap()
  
  useEffect(() => {
    if (data && data.elements) {
      const docksLayer = L.layerGroup()
      
      for (const el of data.elements) {
        if (el.type === 'node' && (el.tags?.harbour || el.tags?.marina || el.tags?.seamark_type === 'harbour')) {
          const marker = L.marker([el.lat, el.lon], { 
            icon: L.divIcon({ 
              className: '', 
              html: '<div style="font-size:16px;line-height:16px;">⚓</div>', 
              iconSize: [16, 16], 
              iconAnchor: [8, 8] 
            }) 
          })
          
          const details = Object.entries(el.tags || {}).map(([k, v]) => `<div><strong>${k}</strong>: ${v}</div>`).slice(0, 10).join('')
          marker.bindPopup(`<div><strong>Harbor/Marina</strong>${details}</div>`)
          docksLayer.addLayer(marker)
        }
      }
      
      docksLayer.addTo(map)
      
      return () => {
        map.removeLayer(docksLayer)
      }
    }
  }, [data, map])
  
  return null
}

// Map Events Handler
const MapEvents: React.FC = () => {
  const map = useMap()
  
  useEffect(() => {
    const handleMoveEnd = () => {
      const bounds = map.getBounds()
      const zoom = map.getZoom()
      
      // Load data when zoom is appropriate and bounds are reasonable
      if (zoom >= 8) {
        // Trigger data loading for all visible layers
        window.dispatchEvent(new CustomEvent('mapBoundsChanged', { detail: bounds }))
      }
    }
    
    map.on('moveend', handleMoveEnd)
    map.on('zoomend', handleMoveEnd)
    
    // Initial load
    setTimeout(() => {
      handleMoveEnd()
    }, 1000)
    
    return () => {
      map.off('moveend', handleMoveEnd)
      map.off('zoomend', handleMoveEnd)
    }
  }, [map])
  
  return null
}

const NavigationPage: React.FC = () => {
  // State for navigation
  const [isNavigating, setIsNavigating] = useState(false)
  const [currentRoute, setCurrentRoute] = useState<any>(null)
  const [showRoutePreview, setShowRoutePreview] = useState(false)
  const [showSettings, setShowSettings] = useState(false)
  const [showHazardReport, setShowHazardReport] = useState(false)
  const [showPOIList, setShowPOIList] = useState(false)
  const [routeCoordinates, setRouteCoordinates] = useState<[number, number][]>([])
  const [currentStep, setCurrentStep] = useState(0)
  const [isVoiceEnabled, setIsVoiceEnabled] = useState(true)
  const [currentSpeed, setCurrentSpeed] = useState(8.5) // knots
  
  // State for map data
  const [isLoading, setIsLoading] = useState(false)
  const [waterwaysData, setWaterwaysData] = useState<any>(null)
  const [locksData, setLocksData] = useState<any>(null)
  const [bridgesData, setBridgesData] = useState<any>(null)
  const [docksData, setDocksData] = useState<any>(null)
  const [showWaterways, setShowWaterways] = useState(false)
  const [showLocks, setShowLocks] = useState(false)
  const [showBridges, setShowBridges] = useState(false)
  const [showDocks, setShowDocks] = useState(false)
  const [showMapPanel, setShowMapPanel] = useState(false)
  
  const mapRef = useRef<L.Map | null>(null)
  const positionIntervalRef = useRef<ReturnType<typeof setInterval> | null>(null)

  // Helper function to create bbox string for Overpass API
  const bboxString = (bounds: L.LatLngBounds) => {
    const sw = bounds.getSouthWest()
    const ne = bounds.getNorthEast()
    return `${sw.lat},${sw.lng},${ne.lat},${ne.lng}`
  }

  // Overpass API queries
  const qWaterways = (bounds: L.LatLngBounds) => {
    const bbox = bboxString(bounds)
    return `[out:json][timeout:25];
      (
        way["waterway"~"^(river|canal|stream|ditch)$"]["boat"!="no"]["motor_vehicle"!="yes"](${bbox});
        way["waterway"~"^(fairway|shipping_lane)$"](${bbox});
      );
      out body;
      >;
      out skel qt;`
  }

  const qPOIs = (bounds: L.LatLngBounds) => {
    const bbox = bboxString(bounds)
    return `[out:json][timeout:25];
      (
        node["waterway"="lock_gate"](${bbox});
        node["lock"="yes"](${bbox});
        way["waterway"="lock_gate"](${bbox});
        way["lock"="yes"](${bbox});
        way["bridge"](${bbox});
        node["harbour"](${bbox});
        node["marina"](${bbox});
        node["seamark_type"="harbour"](${bbox});
      );
      out body;
      >;
      out skel qt;`
  }

  // Fetch data from Overpass API
  const fetchOverpass = async (query: string, type: string) => {
    try {
      console.log(`Fetching ${type} data...`)
      const response = await fetch('https://overpass-api.de/api/interpreter', {
        method: 'POST',
        body: query
      })
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      
      const data = await response.json()
      console.log(`${type} data received:`, data)
      return data
    } catch (error) {
      console.error(`Error fetching ${type} data:`, error)
      return null
    }
  }

  // Load waterways data
  const loadWaterwaysData = async (bounds: L.LatLngBounds) => {
    if (waterwaysData) return // Already loaded
    
    setIsLoading(true)
    const data = await fetchOverpass(qWaterways(bounds), 'waterways')
    if (data) {
      setWaterwaysData(data)
    }
    setIsLoading(false)
  }

  // Load POIs data (locks, bridges, docks)
  const loadPOIsData = async (bounds: L.LatLngBounds) => {
    if (locksData && bridgesData && docksData) return // Already loaded
    
    setIsLoading(true)
    const data = await fetchOverpass(qPOIs(bounds), 'POIs')
    if (data) {
      setLocksData(data)
      setBridgesData(data)
      setDocksData(data)
    }
    setIsLoading(false)
  }

  // Navigation functions
  const startNavigation = (route: any) => {
    setCurrentRoute(route)
    setIsNavigating(true)
    setRouteCoordinates(route.coordinates as [number, number][])
    setCurrentStep(0)
    
    // Start position tracking
    if (navigator.geolocation) {
      positionIntervalRef.current = setInterval(() => {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const { latitude, longitude } = position.coords
            // Update current position and check if we need to move to next step
            // This is a simplified version - you can expand this logic
          },
          (error) => {
            console.error('Geolocation error:', error)
          }
        )
      }, 5000) // Update every 5 seconds
    }
  }

  const stopNavigation = () => {
    setIsNavigating(false)
    setCurrentRoute(null)
    setRouteCoordinates([])
    setCurrentStep(0)
    
    if (positionIntervalRef.current) {
      clearInterval(positionIntervalRef.current)
      positionIntervalRef.current = null
    }
  }

  // Voice guidance
  const speak = (text: string) => {
    if (isVoiceEnabled && 'speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.rate = 0.9
      utterance.pitch = 1.1
      window.speechSynthesis.speak(utterance)
    }
  }

  // Handle map bounds changes
  useEffect(() => {
    const handleMapBoundsChanged = (event: CustomEvent) => {
      const bounds = event.detail
      if (showWaterways) loadWaterwaysData(bounds)
      if (showLocks || showBridges || showDocks) loadPOIsData(bounds)
    }
    
    window.addEventListener('mapBoundsChanged', handleMapBoundsChanged as EventListener)
    
    return () => {
      window.removeEventListener('mapBoundsChanged', handleMapBoundsChanged as EventListener)
    }
  }, [showWaterways, showLocks, showBridges, showDocks])

  return (
    <div className="relative w-full h-screen bg-gray-100">
      {/* Mobile-specific CSS for better touch experience */}
      <style>{`
        @media (max-width: 640px) {
          .leaflet-container {
            touch-action: manipulation;
          }
          .leaflet-control-zoom {
            transform: scale(0.9);
            transform-origin: bottom right;
          }
        }
      `}</style>

      {/* Floating Show on Map Button - Right side */}
      <button
        onClick={() => setShowMapPanel(!showMapPanel)}
        className="fixed right-4 top-4 z-[9999] w-14 h-14 bg-gradient-to-br from-blue-600 to-cyan-600 text-white rounded-full shadow-2xl flex items-center justify-center hover:brightness-95 transition-all duration-200 active:scale-[0.98] border border-white/30"
        title="Show on Map"
      >
        <span className="text-2xl">🗺️</span>
      </button>

      {/* Show on Map Pop-up Panel */}
      {showMapPanel && (
        <div className="fixed right-4 top-20 z-[9999] bg-gradient-to-br from-blue-600 to-cyan-600 backdrop-blur-md border border-white/30 rounded-xl shadow-2xl p-4 w-80">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold text-white">Show on Map</h3>
            <button
              onClick={() => setShowMapPanel(false)}
              className="text-white hover:text-blue-200 transition-colors"
            >
              ✕
            </button>
          </div>
          
          <div className="space-y-3">
            <label className="flex items-center gap-3 text-white">
              <input 
                type="checkbox" 
                checked={showWaterways}
                onChange={(e) => {
                  setShowWaterways(e.target.checked)
                  if (e.target.checked && !waterwaysData && mapRef.current) {
                    loadWaterwaysData(mapRef.current.getBounds())
                  }
                }}
                className="w-4 h-4 rounded border-white text-blue-500 focus:ring-blue-500"
              />
              <span className="text-sm">🌊 Waterways</span>
            </label>
            
            <label className="flex items-center gap-3 text-white">
              <input 
                type="checkbox" 
                checked={showLocks}
                onChange={(e) => {
                  setShowLocks(e.target.checked)
                  if (e.target.checked && !locksData && mapRef.current) {
                    loadPOIsData(mapRef.current.getBounds())
                  }
                }}
                className="w-4 h-4 rounded border-white text-blue-500 focus:ring-blue-500"
              />
              <span className="text-sm">🚦 Locks</span>
            </label>
            
            <label className="flex items-center gap-3 text-white">
              <input 
                type="checkbox" 
                checked={showBridges}
                onChange={(e) => {
                  setShowBridges(e.target.checked)
                  if (e.target.checked && !bridgesData && mapRef.current) {
                    loadPOIsData(mapRef.current.getBounds())
                  }
                }}
                className="w-4 h-4 rounded border-white text-blue-500 focus:ring-blue-500"
              />
              <span className="text-sm text-green-400">🌉 Bridges</span>
            </label>
            
            <label className="flex items-center gap-3 text-white">
              <input 
                type="checkbox" 
                checked={showDocks}
                onChange={(e) => {
                  setShowDocks(e.target.checked)
                  if (e.target.checked && !docksData && mapRef.current) {
                    loadPOIsData(mapRef.current.getBounds())
                  }
                }}
                className="w-4 h-4 rounded border-white text-blue-500 focus:ring-blue-500"
              />
              <span className="text-sm">⚓ Harbors/Docking</span>
            </label>
          </div>
          
          <div className="mt-3 pt-3 border-t border-white/20 space-y-2">
            <button
              onClick={() => {
                if (mapRef.current) {
                  loadWaterwaysData(mapRef.current.getBounds())
                  loadPOIsData(mapRef.current.getBounds())
                }
              }}
              className="w-full bg-white text-blue-600 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-colors duration-200 shadow-lg"
            >
              🔄 Refresh All Data
            </button>
            
            <button
              onClick={() => {
                if (navigator.geolocation && mapRef.current) {
                  navigator.geolocation.getCurrentPosition(
                    (position) => {
                      const { latitude, longitude } = position.coords
                      mapRef.current?.setView([latitude, longitude], 14)
                    },
                    (error) => {
                      console.error('Geolocation error:', error)
                    }
                  )
                }
              }}
              className="w-full bg-white text-blue-600 hover:bg-blue-50 py-2 px-3 rounded-lg text-sm font-medium transition-colors duration-200 shadow-lg"
            >
              📍 Locate Me
            </button>
          </div>
        </div>
      )}

      {/* Loading Indicator */}
      {isLoading && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 z-[9999] bg-blue-600 text-white px-4 py-2 rounded-lg shadow-2xl">
          <div className="flex items-center gap-2">
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            <span className="text-sm font-medium">Loading Netherlands waterway data...</span>
          </div>
        </div>
      )}

      {/* Navigation Header */}
      {isNavigating && currentRoute && (
        <div className="fixed top-0 left-0 right-0 z-[9999] bg-black/90 backdrop-blur-sm text-white shadow-2xl border-b border-blue-400/20">
          <div className="flex items-center justify-between px-4 py-3">
            <div className="flex-1">
              <div className="text-sm text-blue-300 mb-1">
                {currentRoute.steps[currentStep]?.waterway}
              </div>
              <div className="text-lg font-semibold">
                {currentRoute.steps[currentStep]?.instruction}
              </div>
            </div>
            
            <div className="text-right">
              <div className="text-2xl font-bold text-cyan-300">
                {Math.round(currentRoute.steps[currentStep]?.distance || 0)}m
              </div>
              <div className="text-sm text-blue-300">
                {Math.round(currentRoute.steps[currentStep]?.estimatedTime || 0)} min
              </div>
            </div>
            
            <button
              onClick={stopNavigation}
              className="ml-4 p-2 bg-red-600/20 hover:bg-red-600/30 rounded-lg transition-colors duration-200 border border-red-500/30"
            >
              <X size={20} />
            </button>
          </div>
        </div>
      )}

      {/* Map Container */}
      <div className={`w-full ${isNavigating ? 'h-full' : 'h-screen'}`} style={{zIndex: 1, position: 'relative'}}>
        <MapContainer
          center={[52.1, 5.3]}
          zoom={8}
          className="h-full w-full"
          style={{zIndex: 1, position: 'relative'}}
          ref={mapRef}
        >
          {/* Map Events Handler */}
          <MapEvents />
          
          {/* Base Map */}
          <TileLayer
            url="https://tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution='&copy; OpenStreetMap contributors'
            maxZoom={19}
          />
          
          {/* Real Netherlands Waterways */}
          {waterwaysData && waterwaysData.elements && (
            <WaterwaysLayer data={waterwaysData} />
          )}
          
          {/* Real Locks */}
          {locksData && locksData.elements && (
            <LocksLayer data={locksData} />
          )}
          
          {/* Real Bridges */}
          {bridgesData && bridgesData.elements && (
            <BridgesLayer data={bridgesData} />
          )}
          
          {/* Real Docks/Marinas */}
          {docksData && docksData.elements && (
            <DocksLayer data={docksData} />
          )}

          {/* Active Route */}
          {currentRoute && (
            <Polyline
              positions={currentRoute.coordinates}
              color="#A2E5F8"
              weight={8}
              opacity={0.9}
              lineCap="round"
              lineJoin="round"
            />
          )}
        </MapContainer>
      </div>

      {/* Bottom Navigation Panel - Light Theme */}
      <div className="fixed bottom-0 left-0 right-0 z-[9999] bg-gradient-to-br from-blue-600 to-cyan-600 backdrop-blur-md border-t border-white/30 shadow-2xl">
        <div className="flex items-center justify-center gap-4 px-4 sm:px-6 py-3 sm:py-4">
          <button
            onClick={() => window.location.href = '/'}
            className="flex items-center gap-2 px-4 sm:px-6 py-3 bg-white text-blue-600 hover:bg-blue-50 rounded-xl transition-all duration-200 font-medium shadow-lg text-sm"
          >
            <Navigation size={20} />
            <span className="font-medium">Navigation</span>
          </button>
          
          <button
            onClick={() => window.location.href = '/reports'}
            className="flex items-center gap-2 px-4 sm:px-6 py-3 bg-white/20 hover:bg-white/30 rounded-xl transition-all duration-200 text-white text-sm"
          >
            <AlertTriangle size={20} />
            <span className="font-medium">Reports</span>
          </button>
          
          <button
            onClick={() => window.location.href = '/settings'}
            className="flex items-center gap-2 px-4 sm:px-6 py-3 bg-white/20 hover:bg-white/30 rounded-xl transition-all duration-200 text-white text-sm"
          >
            <Settings size={20} />
            <span className="font-medium">Settings</span>
          </button>
        </div>
        
        {/* Current Navigation Info */}
        {isNavigating && currentRoute && (
          <div className="px-4 pb-3 border-t border-white/20 pt-3">
            <div className="flex items-center justify-between text-white text-sm">
              <div className="flex items-center gap-4">
                <span>Distance: {Math.round(currentRoute.totalDistance || 0)}m</span>
                <span>ETA: {Math.round(currentRoute.totalTime || 0)} min</span>
              </div>
              <div className="flex items-center gap-2">
                <span>Step {currentStep + 1} of {currentRoute.steps?.length || 0}</span>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hazard Report Modal */}
      {showHazardReport && (
        <div className="fixed inset-0 z-[9999] bg-black/50 flex items-center justify-center p-2 sm:p-4">
          <div className="bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 max-w-md w-full mx-2">
            <h3 className="text-lg font-semibold mb-4">Report Hazard</h3>
            <div className="space-y-3">
              <button className="w-full p-3 bg-red-100 hover:bg-red-200 rounded-lg text-red-800 font-medium">
                ⚠️ Shallow Water
              </button>
              <button className="w-full p-3 bg-orange-100 hover:bg-orange-200 rounded-lg text-orange-800 font-medium">
                🚧 Debris
              </button>
              <button className="w-full p-3 bg-yellow-100 hover:bg-yellow-200 rounded-lg text-yellow-800 font-medium">
                🌉 Bridge Issue
              </button>
            </div>
            <button
              onClick={() => setShowHazardReport(false)}
              className="mt-4 w-full p-3 bg-gray-100 hover:bg-gray-200 rounded-lg text-gray-800 font-medium"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      {/* Settings Modal */}
      {showSettings && (
        <div className="fixed inset-0 z-[9999] bg-black/50 flex items-center justify-center p-2 sm:p-4">
          <div className="bg-white rounded-xl sm:rounded-2xl p-4 sm:p-6 max-w-md w-full mx-2">
            <h3 className="text-lg font-semibold mb-4">Quick Settings</h3>
            <div className="space-y-3">
              <label className="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={isVoiceEnabled}
                  onChange={(e) => setIsVoiceEnabled(e.target.checked)}
                  className="w-4 h-4 rounded"
                />
                <span>Voice Guidance</span>
              </label>
              <div className="flex items-center gap-3">
                <span>Speed: {currentSpeed} knots</span>
                <input
                  type="range"
                  min="1"
                  max="20"
                  step="0.5"
                  value={currentSpeed}
                  onChange={(e) => setCurrentSpeed(parseFloat(e.target.value))}
                  className="flex-1"
                />
              </div>
            </div>
            <button
              onClick={() => setShowSettings(false)}
              className="mt-4 w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium"
            >
              Close
            </button>
          </div>
        </div>
      )}
    </div>
  )
}

export default NavigationPage
